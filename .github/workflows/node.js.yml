# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Screenshot Testing

on:
  push:
    branches: [main, action]
  pull_request:
    branches: [main, action]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
      - name: 'install, run, test'
        shell: bash
        run: |
          npm ci
          npm run build
          npx playwright install
          npm run test
        continue-on-error: true
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            test-results
            !dist/**/*.md
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
      - name: Display structure of downloaded files
        run: |
          cd e2e-example-example-test
          ls
      - name: Upload to imgur
        uses: devicons/public-upload-to-imgur@v2.2.1
        id: imgur_step
        with:
          client_id: ${{secrets.IMGUR_CLIENT_ID}} 
          path: e2e-example-example-test
      - name: Comment on the PR about the result
        uses: github-actions-up-and-running/pr-comment@v1.0.1  # you can use any action that you want. This is only an example
        env:
          # recall that this action returns a JSON.stringified array
          IMG_URL: ${{ fromJSON(steps.imgur_step.outputs.imgur_urls)[0] }}  # get the output of the step above using its id
          MESSAGE: |
            Here is the picture that was uploaded:
            ![Image]({0}) # markdown syntax for displaying a picture
        with:
          repo-token: ${{ secrets.TOKEN }}
          message: ${{format(env.MESSAGE, env.IMG_URL)}}  # add the url into the string
      - name: prepare comment body
          id: comment-body
          uses: actions/github-script@v5
          with:
            script: |
              const images = fromJSON(steps.imgur_step.outputs.imgur_urls)
              const imgArr = JSON.parse(images);

              if (Array.isArray(imgArr) && imgArr.length) {
              if (!hasFailed) hasFailed = true;
              str += `
                <strong>${platform}</strong>
                | Actual | Diff | Expected |
                |:------:|:----:|:--------:|
              `;
              imgArr.forEach(({ actual, diff, expected }) => {
                str += `
                  | ${actual.name} | ${diff.name} | ${expected.name} |
                  | ![${actual.name}](${actual.link}) | ![${diff.name}](${diff.link}) | ![${expected.name}](${expected.link}) |
                `;
              });
              str += '\n\n';
              await github.rest.issues.createComment({
                  owner: "pengpengzx",
                  repo: "next-demo",
                  issue_number: 1,
                  body: str
                });
