# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Screenshot Testing

on:
  push:
    branches: [main, action]
  pull_request:
    branches: [main, action]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
      - name: 'install, run, test'
        shell: bash
        run: |
          npm ci
          npm run build
          npx playwright install
          npm run test
        continue-on-error: true
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            test-results
            !dist/**/*.md
      - uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: ${{github.workspace}}
      - name: Display structure of downloaded files
        run: ls
      - name: Unzip files
        run: |
          unzip my-artifact.zip
          
      - name: parse images
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require("fs");
            const files = ["images-linux", "images-windows-latest"];
            let result = {};
            for (const file of files) {
              try {
                const raw = JSON.parse(fs.readFileSync("${{github.workspace}}/" + file + ".json"));
                const key = file.replace("images-", "").replace("-latest", "").trim()
                result[key] = raw;
              } catch (err) {
                console.log(err);
              }
            }
            fs.writeFileSync(`./images.json`, JSON.stringify(result, null, 2));
